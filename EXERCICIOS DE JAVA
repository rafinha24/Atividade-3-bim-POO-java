EXERCÍCIO 1

public abstract class Veiculos{
    private String marca;
    private String modelo;
    private int ano;
    private boolean comAno;

    public Veiculos(String Marca, String Modelo, int Ano) throws IllegalArgumentException, Exception{
        this.setMarca(Marca);
        this.setModelo(Modelo);
        this.setAno(Ano);
    }

    public void setMarca(String marca){
        this.marca = marca;
    }

    public void setModelo(String modelo){
        this.modelo = modelo;
    }

    public void setAno(int ano){
        this.ano = ano;
    }

    public void setComAno(boolean comAno){
    try{
        System.out.println(+ano);
        this.comAno = comAno;
        }
    catch(ArrayIndexOutOfBoundsException ex){
        System.out.println("Ano invalido");
     }
    }

    public String getModelo(String modelo){
        return  modelo;
    }

    public int getAno(int ano){
        return  ano;
    }

    public String getMarca(String marca){
        return  marca;
    }

    public abstract double calcularCustoManutencao(String marca, String modelo);
    public abstract String descricao(boolean setComAno);

}

EXERCÍCIO 2

public class Carro extends Veiculos{
    private int numeroDePortas;

    public Carro(String Marca, String Modelo, int Ano, int numeroDePortas) throws IllegalArgumentException, Exception{
        super(Marca, Modelo, Ano);
        this.numeroDePortas = numeroDePortas;
    }

    public double calcularCustoManutencao(){
        System.out.println("Marca:");
        System.out.println("Modelo:");
        System.out.println("preço:");
    }
    public String descricao(){
        System.out.println("ano:");
    }

    @Override
    public double calcularCustoManutencao(String Marca, String Modelo){
        System.out.println("Marca:" + Marca);
        System.out.println("Modelo:" + Modelo);
        System.out.println("preço:" + numeroDePortas*200);
    }

    @Override
        public String descricao(boolean setComAno){
        System.out.println("ano:" + setComAno);
        }
}

EXERCICIO 3

public class Moto extends Veiculos {
    private boolean temCarenagem;
    private String presença;
    private String ausencia;
    
    
    public boolean calcularCustoManutencao() {
        if (temCarenagem) {
            System.out.println("Custo de manutenção com carenagem: 500R$");
        } else {
            System.out.println("Custo de manutenção sem carenagem: 300R$");
        }
        return temCarenagem;
    }


    public void setPresença(String presença) {
        this.presença = presença;
    }

    public void setAusencia(String ausencia) {
        this.ausencia = ausencia;
    }

    public void setTemCarenagem(boolean temCarenagem) {
        this.temCarenagem = temCarenagem;
    }


    public String getPresença() {
        return presença;
    }

    public String getAusencia() {
        return ausencia;
    }
    public String descricao() {
        if (temCarenagem) {
            return "Moto com carenagem";
        } else {
            return "Moto sem carenagem";
        }
    }
}

public class Main {
    public static void main(String[] args) {
        try {
            Carro carro = new Carro("Ford", "Fiesta", 2020, 4);
            Moto moto = new Moto("Honda", "CB500", 2021, true);

            System.out.println(carro.descricao());
            System.out.println("Custo de manutenção do carro: R$ " + carro.calcularCustoManutencao());

            System.out.println(moto.descricao());
            System.out.println("Custo de manutenção da moto: R$ " + moto.calcularCustoManutencao());

        } catch (IllegalArgumentException e) {
            System.out.println("Erro: " + e.getMessage());
        }
    }
}
